<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mike Jarrett</title><link>https://notes.mikejarrett.ca/</link><description>Mike Jarrett's Blog</description><atom:link href="https://notes.mikejarrett.ca/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:mike@mikejarrett.ca"&gt;Mike Jarrett&lt;/a&gt; </copyright><lastBuildDate>Sat, 19 Jan 2019 20:57:13 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Optimizing your Nikola blog for Jupyter notebooks</title><link>https://notes.mikejarrett.ca/optimizing-your-nikola-blog-for-jupyter-notebooks/</link><dc:creator>Mike Jarrett</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;You've installed &lt;a href="https://getnikola.com"&gt;Nikola&lt;/a&gt;. You've also followed &lt;a href="https://mglerner.github.io/posts/switching-to-nikloa-for-jupyter-notebooks-and-a-static-site.html"&gt;some instructions on how to use Jupyter notebooks as posts&lt;/a&gt;. Everything works! But after you make your first Jupyter post, the results are... uninspiring. The import prompts are ugly. If you've written I post designed primarily for the content, not the code, there's no was to turn off showing the code cells. This post will describe how I -- someone with almost no experience with javascript, CSS, etc -- made my blog more functional to work with Jupyter notebooks.&lt;/p&gt;
&lt;h2 id="Install-Nikola"&gt;Install Nikola&lt;a class="anchor-link" href="https://notes.mikejarrett.ca/optimizing-your-nikola-blog-for-jupyter-notebooks/#Install-Nikola"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Follow the instructions on the Nikola website, or a million blog posts from other users.&lt;/p&gt;
&lt;h2 id="Pick-a-theme"&gt;Pick a theme&lt;a class="anchor-link" href="https://notes.mikejarrett.ca/optimizing-your-nikola-blog-for-jupyter-notebooks/#Pick-a-theme"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Pick the theme you like best and install with &lt;code&gt;nikola theme -i theme_name&lt;/code&gt;. I used the bootstrap3 theme. These instructions should work for any Bootstrap-based theme, and possible others though I haven't tested them.&lt;/p&gt;
&lt;h2 id="Create-a-new-theme"&gt;Create a new theme&lt;a class="anchor-link" href="https://notes.mikejarrett.ca/optimizing-your-nikola-blog-for-jupyter-notebooks/#Create-a-new-theme"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Nikola allows for theme inheritance, so we'll create a new theme that inherits from bootstrap3. This means in our new theme we only have to create the files we want to change, otherwise Nikola will fall back to the parent theme. Following the &lt;a href="https://getnikola.com/creating-a-theme.html"&gt;official instructions&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nikola theme -n bootyper --parent bootstrap4 --engine mako&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will create a new directory &lt;code&gt;/themes/bootyper&lt;/code&gt; which is empty except for a file called bootyper.theme. You'll also be prompted to update your current theme in your conf.py file. Might as well do that now. While you're in conf.py, update the following sections.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;POSTS = (
    ("posts/*.rst", "posts", "post.tmpl"),
    ("posts/*.md", "posts", "post.tmpl"),
    ("posts/*.txt", "posts", "post.tmpl"),
    ("posts/*.html", "posts", "post.tmpl"),
    ("posts/*.ipynb", "posts", "post_ipynb.tmpl"),
)
PAGES = (
    ("pages/*.rst", "pages", "page.tmpl"),
    ("pages/*.md", "pages", "page.tmpl"),
    ("pages/*.txt", "pages", "page.tmpl"),
    ("pages/*.html", "pages", "page.tmpl"),
    ("pages/*.ipynb", "pages", "post_ipynb.tmpl"),
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we're doing here is telling Nikola that when you add a Jupyter notebook as a page or post, that you want to use a different template file called &lt;code&gt;post_ipynb.tmpl&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="Make-a-Jupyter-template"&gt;Make a Jupyter template&lt;a class="anchor-link" href="https://notes.mikejarrett.ca/optimizing-your-nikola-blog-for-jupyter-notebooks/#Make-a-Jupyter-template"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now let's make that template. Copy the &lt;code&gt;post.tmpl&lt;/code&gt; file from your parent theme and rename it as so:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cp ./themes/bootstrap4/templates/post.tmpl ./themes/bootyper/templates/post_ipynb.tmpl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we're free to modify the new template file, and it will only apply to posts that use Jupyter notebooks. First let's add a custom CSS file to the header. The post template we're using provides us with a block of code called "extra_head" which will be inserted into the end of the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element when the HTML is rendered. Let's link to our custom CSS file here&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%block name="extra_head"&amp;gt;
[...]
&amp;lt;link rel="stylesheet" href="../assets/css/bootyper.css"&amp;gt;
&amp;lt;/%block&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="Clean-up-the-Jupyter-CSS"&gt;Clean up the Jupyter CSS&lt;a class="anchor-link" href="https://notes.mikejarrett.ca/optimizing-your-nikola-blog-for-jupyter-notebooks/#Clean-up-the-Jupyter-CSS"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We need to create the file we just linked to. Open a new file &lt;code&gt;./themes/bootyper/assets/css/bootyper.css&lt;/code&gt;. This is where we'll stick our custom CSS that only applies to posts and pages made with Jupyter notebooks.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;div.prompt {
    display: none;
}

div.input  {
    border: none;
    background-color: none;
}

div.input * {
    background-color: none;
}

/* set a max-width for horizontal fluid layout and make it centered */
.body-content {
  margin-right: auto;
  margin-left: auto;
  max-width: 750px; /* or 950px */
}

div.output_subarea {
    /* Widens image-containing divs so that image is full body width */
    max-width: 100%;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It's totally up to you how to style your notebook. I totally ditch the input prompts, but instead you could just make them prettier than the default. I also change the styling of the input code blocks, and make the content div a little narrower so it's easier to read on wider screens. Finally I make embedded images the full width of the content div. I'm not much of a designer so I stop here, but the possibilities are of course endless.&lt;/p&gt;
&lt;h2 id="Going-further-with-Javascript"&gt;Going further with Javascript&lt;a class="anchor-link" href="https://notes.mikejarrett.ca/optimizing-your-nikola-blog-for-jupyter-notebooks/#Going-further-with-Javascript"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The one thing I really wanted for my blog was to make it optional for the reader to see the raw code. Some posts would be designed as code-throughs, but others would be read mainly for the text and images and the code would be an extra for those interested. I've added two features to make this possible: 1) A button that toggles the visibility of the input code blocks, and 2) a metadata setting to set the default visibility of the code blocks on page load. Let's create a javascript library for these features in &lt;code&gt;./themes/bootyper/assets/js/bootyper.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function code_toggle() {
    if (!code_show){
    $('div.input').hide();
    //$('div.prompt.output_prompt').hide();  //unnecessary since I'm hiding all prompts anyways in css
    } else {
    $('div.input').show();
    }
 code_show = !code_show
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function checks the value of the javascript variable &lt;code&gt;code_show&lt;/code&gt; and either shows or hides the div with the input code, then switches the value of code_show. We'll run this function on page load, and then when the reader clicks on a button to show/hids the code.&lt;/p&gt;
&lt;p&gt;Now we need to make another update to our template file &lt;code&gt;post_ipynb.tmpl&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%block name="extra_head"&amp;gt;
[...]
&amp;lt;link rel="stylesheet" href="../assets/css/bootyper.css"&amp;gt;
&amp;lt;script type="text/javascript" src="https://code.jquery.com/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type="text/javascript" src="../assets/js/bootyper.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script type="text/javascript"&amp;gt;
code_show = false;
$( document ).ready(code_toggle);
&amp;lt;/%block&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we've added a jquery library and our custom bootyper.js file. I've hard-coded in the default value of &lt;code&gt;code_show&lt;/code&gt; as false, then I call the &lt;code&gt;code_toggle&lt;/code&gt; function so that when the page loads the code cells aren't shown. Further down in the template file we can add a button to run this script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%block name="content"&amp;gt;
&amp;lt;article class="post-${post.meta('type')} h-entry hentry postpage" itemscope="itemscope" itemtype="http://schema.org/Article"&amp;gt;
    ${pheader.html_post_header()}


    &amp;lt;form id="toggle-button" action="javascript:code_toggle()"&amp;gt;&amp;lt;input type="submit" class="btn btn-primary" value="Click here to toggle on/off the raw code."&amp;gt;&amp;lt;/form&amp;gt;
    [...]
&amp;lt;/%block&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We're only adding the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element. I place the button immediately at the top of the content of the article, below the title and data/author. You can place it wherever you'd prefer, and give it any style you'd like. Again I just keep it simple and use a default bootstrap button style. And that's all it takes to have a button to optionally show or hide the input code in your Jupyter notebook!&lt;/p&gt;
&lt;h2 id="One-more-step:-Nikola-metadata"&gt;One more step: Nikola metadata&lt;a class="anchor-link" href="https://notes.mikejarrett.ca/optimizing-your-nikola-blog-for-jupyter-notebooks/#One-more-step:-Nikola-metadata"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Finally, I want to be able to set the default &lt;code&gt;code_show&lt;/code&gt; value on a post by post basis. I do this using the notebook metadata. In Jupyter, go to Edit-&amp;gt;Edit Notebook Metadata and you'll see see some JSON elements. By running &lt;code&gt;nikola add_post -i notebook.ipynb&lt;/code&gt; to add your notebook as a Nikola post, Nikola will insert some custom fields into the JSON. We just need to add one field, &lt;code&gt;code = "false"&lt;/code&gt;, to the metadata so it looks something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "kernelspec": {
    "name": "python3",
    "display_name": "Python 3",
    "language": "python"
  },
  "language_info": {
    "name": "python",
    "version": "3.6.6",
    "mimetype": "text/x-python",
    "codemirror_mode": {
      "name": "ipython",
      "version": 3
    },
    "pygments_lexer": "ipython3",
    "nbconvert_exporter": "python",
    "file_extension": ".py"
  },
  "nikola": {
    "category": "",
    "code": "false",
    "date": "2019-01-14 16:27:18 UTC-08:00",
    "description": "",
    "link": "",
    "slug": "optimizing-your-nikola-blog-for-jupyter-notebooks",
    "status": "draft",
    "tags": "",
    "title": "Optimizing your Nikola blog for Jupyter notebooks",
    "type": "text"
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These metadata fields will automoatically get passed to the Nikola template engine so they're available to use in your template file. Let's add an if/else statement in the template to set the &lt;code&gt;code_show&lt;/code&gt; variable based on our &lt;code&gt;code&lt;/code&gt; metadata field.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%block name="extra_head"&amp;gt;
[...]
&amp;lt;link rel="stylesheet" href="../assets/css/bootyper.css"&amp;gt;
&amp;lt;script type="text/javascript" src="https://code.jquery.com/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type="text/javascript" src="../assets/js/bootyper.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script type="text/javascript"&amp;gt;
% if post.meta('code') in ["false","False"]:
    code_show = false;
% else:
    code_show = true;
% endif
$( document ).ready(code_toggle);
&amp;lt;/%block&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if I set the &lt;code&gt;code&lt;/code&gt; metadata to "false" or "False" then the code cells will be hidden on page load. Otherwise they'll be shown!&lt;/p&gt;
&lt;p&gt;That's it! Hopefully this is a good rundown of the basics of optimizing a Nikola theme for Jupyter notebooks and you'll be able to further customize from here. I keep my version of the bootyper theme on &lt;a href="https://github.com/mjarrett/bootyper"&gt;github&lt;/a&gt;. It contains the features show here plus a few extra features that aren't in the default theme. Some things I'd like to add in the future is having the code cells show some marker when they're hidden so the reader know's they're there, and also to have the toggle button float as the reader scrolls down the page.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Here's the output of a code cell. Use the toggle button to see the code!"&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[2]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;"Here's the output of a code cell. Use the toggle button to see the code!"&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><category>nikola</category><guid>https://notes.mikejarrett.ca/optimizing-your-nikola-blog-for-jupyter-notebooks/</guid><pubDate>Tue, 15 Jan 2019 00:27:18 GMT</pubDate></item><item><title>Connecting neighbourhoods</title><link>https://notes.mikejarrett.ca/connecting-neighbourhoods/</link><dc:creator>Mike Jarrett</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I've been working on how best to look at connections between the various Mobi bikeshare stations throughout Vancouver. One thing the quickly became obvious was that some visualizations are much too noisy with all stations, but work nicely when I group stations into neighbourhoods. Luckily the city &lt;a href="https://data.vancouver.ca/datacatalogue/index.htm"&gt;geometry files of the various neighourhoods available in their open data collection&lt;/a&gt;, so I was able to use those to group the stations according to the city's official definitions. See the distributions of stations below.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://notes.mikejarrett.ca/connecting-neighbourhoods/"&gt;Read more…&lt;/a&gt; (130 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://notes.mikejarrett.ca/connecting-neighbourhoods/</guid><pubDate>Sun, 13 Jan 2019 23:08:50 GMT</pubDate></item><item><title>How Vancouver Uses Mobi Bikes</title><link>https://notes.mikejarrett.ca/how-vancouver-uses-mobi-bikes/</link><dc:creator>Mike Jarrett</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Vancouver's Mobi bikeshare system has been up and running for over 2 years now, and with two full summers of activity it's time to take a look at how exactly Vancouverites are using their bikeshare system.&lt;/p&gt;
&lt;p&gt;For over a year, I've been collecting real-time data about Mobi bike trips by monitoring public information about the number of bikes at each station and inferring trip activity based on changes to the number of bikes at each station. This has led to some fun uses: I have live figures updating constantly on &lt;a href="https://notes.mikejarrett.ca/how-vancouver-uses-mobi-bikes/data.mikejarrett.ca/mobi"&gt;my website&lt;/a&gt;, a twitter bot tweets out daily stats at &lt;a href="https://notes.mikejarrett.ca/how-vancouver-uses-mobi-bikes/twitter.com/VanBikeShareBot"&gt;@VanBikeShareBot&lt;/a&gt;, and a few &lt;a href="http://notes.mikejarrett.ca/categories/mobi/"&gt;blog posts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As handy as those live trip estimates are, they're very much estimates and only give us information about how often certain stations are used. Luckily, Mobi has started publishing open &lt;a href="https://www.mobibikes.ca/en/system-data"&gt;system data&lt;/a&gt;. This data set gives us a registry of every Mobi bikeshare trip since the beginning of 2017, current to the end of 2018 as of this writing. With this we have access to trip start and endpoints, trip duration and distance, membership type and more. In this post, I'll summarize some of the things I've learned after spending some time looking into this data.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://notes.mikejarrett.ca/how-vancouver-uses-mobi-bikes/"&gt;Read more…&lt;/a&gt; (214 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>bikes</category><category>datavis</category><category>mobi</category><guid>https://notes.mikejarrett.ca/how-vancouver-uses-mobi-bikes/</guid><pubDate>Mon, 07 Jan 2019 02:27:37 GMT</pubDate></item><item><title>Storing metadata in Pandas DataFrames</title><link>https://notes.mikejarrett.ca/storing-metadata-in-pandas-dataframes/</link><dc:creator>Mike Jarrett</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I came across a problem recently where I wanted to store metadata about each column in a pandas DataFrame. This could be done easily enough with a simple dictionary where each column name is a key, but I was hoping for something that would propogate with a DataFrame as it's sliced, copied, expanded, etc, without having to explicitely keep track of the metadata in my scripts.&lt;/p&gt;
&lt;p&gt;My solution is to use the pandas MultiIndex. In this post I'll discuss the pros and cons of this approach, show some examples, a show how I've subclassed the pandas DataFrame to make this approach easier.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://notes.mikejarrett.ca/storing-metadata-in-pandas-dataframes/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://notes.mikejarrett.ca/storing-metadata-in-pandas-dataframes/</guid><pubDate>Fri, 06 Apr 2018 04:12:42 GMT</pubDate></item><item><title>Mountain View Cemetary Open Data</title><link>https://notes.mikejarrett.ca/mountain-view-cemetary-open-data/</link><dc:creator>Mike Jarrett</dc:creator><description>&lt;figure&gt;&lt;img src="https://data.mikejarrett.ca/images/logo.png"&gt;&lt;/figure&gt; &lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Mountain-View-Cemetary-Open-Data"&gt;Mountain View Cemetary Open Data&lt;a class="anchor-link" href="https://notes.mikejarrett.ca/mountain-view-cemetary-open-data/#Mountain-View-Cemetary-Open-Data"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;One of my goals this year is to turn everything interesting I learn into a blog post. I've been using &lt;a href="http://data.vancouver.ca/datacatalogue/"&gt;Vancouver's open data&lt;/a&gt; to find datasets to play around with, and the site includes some &lt;a href="http://data.vancouver.ca/datacatalogue/mountainViewCemeteryBurialIndex.htm"&gt;data about people interred at Mountain View Cemetary&lt;/a&gt;. A little morbid for a data vis exercise, but I'm doing it anyways.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://notes.mikejarrett.ca/mountain-view-cemetary-open-data/"&gt;Read more…&lt;/a&gt; (37 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://notes.mikejarrett.ca/mountain-view-cemetary-open-data/</guid><pubDate>Fri, 02 Mar 2018 23:29:02 GMT</pubDate></item><item><title>Mapping Google's Location History in Python</title><link>https://notes.mikejarrett.ca/mapping-googles-location-history-in-python/</link><dc:creator>Mike Jarrett</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If you have an Android phone, Google is tracking your location. If you have "Location History" turned on in your settings, Google is &lt;em&gt;really&lt;/em&gt; tracking your location. If you have this setting turned off, Google will still record your location when an app that has proper permission (like Google Maps or Strava) requests your location. This is creepy and probably bad from a privacy standpoint, but it's cool and fun from a data and visualisation standpoint. In the interest of blog content, I've let google track my location since I got my new phone ~1.5 years ago and it's now time to look at the data.&lt;/p&gt;
&lt;p&gt;Google offers ways to look at your location history through their apps, but it's more fun to do it myself. Through myaccount.google.com, you can create an archive of your personal information being stored by Google. You can pick which services you're interested in, but for now I'm just looking for my location history data. It takes some time for Google to create the archive and make it available for download.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://notes.mikejarrett.ca/mapping-googles-location-history-in-python/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><guid>https://notes.mikejarrett.ca/mapping-googles-location-history-in-python/</guid><pubDate>Sat, 06 Jan 2018 03:45:54 GMT</pubDate></item><item><title>What really affects bikeshare use in Vancouver?</title><link>https://notes.mikejarrett.ca/what-really-affects-bikeshare-use-in-vancouver/</link><dc:creator>Mike Jarrett</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;City staff recently reported to Council about the status of the Mobi bikeshare system. You can see the slideshow for yourself &lt;a href="http://council.vancouver.ca/20171115/documents/cfsc3presentation.pdf"&gt;here&lt;/a&gt;. Results generally look positive for the future of bikeshare in Vancouver, but a comment one slide stuck out for me: "Temperature influences ridership more than precipitation".&lt;/p&gt;
&lt;p&gt;Is this really true? In my experience, biking on a cool, dry day is much more enjoyable than biking on a warm rainy day. There was no clue in the council report on how they came to this conclusion, but I suspect they used the eyeball test. But the cooler months in Vancouver are also the rainy months, so a more careful analysis is needed. I'd recently seen an example in Jake Vanderplas' &lt;a href="https://github.com/jakevdp/PythonDataScienceHandbook"&gt;Python Data Science Handbook&lt;/a&gt; that looked at the factors influencing bike ridership in Seattle, so I decided to do a similar thing for Vancouver.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;I've described at bit more about how I collected the Mobi trip data in a &lt;a href="http://mikejarrett.ca/blog/2017/10/machine-learning-with-vancouver-bike-share-data/"&gt;previous post&lt;/a&gt;. While the data is unofficial and has some clear sources of error, it should be reliable to look at usage trends. For weather data, I wrote a small scraper to grab historical Vancouver weather from weather.gc.ca. All the code I used for this post is available on &lt;a href="https://github.com/mjarrett/mobi"&gt;my github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, let's take a zoomed out look at bike usage from late April to early November 2017. Rainfall and daily highs are plotted on the same scale, in degrees Celcius and millimeters of rain. Weekends are highlighted by grey bars. The first thing we see is the obvious broad trend across the seasons, matching up with the temperature trend. This is probably what city staff noticed. Next, we see that on days with sharp drop-offs from the broader trend, there's almost always some rainfall. So far so good!&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-full wp-image-255" src="http://mikejarrett.ca/blog/wp-content/uploads/weather_plot_2017-04-20-2017-11-03.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;(Days with missing data are days I had computer downtime before I moved my scraper to a cloud server.)&lt;/p&gt;
&lt;p&gt;A few things to note. Weather data is per day, and for just one Vancouver weather station. There are certainly days where it pours overnight and the day is clear, or it rains more in one part of the city than another. That said, let's take a closer look at a few weeks.&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-full wp-image-253" src="http://mikejarrett.ca/blog/wp-content/uploads/weather_plot_2017-06-02-2017-06-21.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;Here's two consecutive weekends where there was substantial rain on Sunday but none on Saturday. The drop-off is clear on both weekends. But later in the second week, there is a day with much less rainfall that has almost the same drop-off in number of trips.&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-full wp-image-254" src="http://mikejarrett.ca/blog/wp-content/uploads/weather_plot_2017-09-01-2017-09-21.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;Here's another three week stretch. Again, days with rain clearly show reduced Mobi usage. But usage also follows the temperature line! How much of the variation in bike usage is due to temperature, and how much is due to rain?&lt;/p&gt;
&lt;p&gt;First let's look at temperature and rainfall separately.&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-full wp-image-269" src="http://mikejarrett.ca/blog/wp-content/uploads/trips_vs_temp-1.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;The relationship between temperature and bike share trips is strong and exactly what you'd expect. More people ride on warm days! I've coloured the data by rainfall to see if there's any interesting outliers, but the rainy days are all well within the trend. We had pretty great weather all summer this year, so no examples of really rainy days with warm temperatures.&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-full wp-image-235" style="font-size: 1rem;" src="http://mikejarrett.ca/blog/wp-content/uploads/trips_vs_rainfall.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;Rainfall also shows a clear relationship with daily trips. But it's not linear like temperature. There's a band of zero rain days that correlate with temperature, then a linear segment as ridership falls off with increased rainfall, then ridership hits a baseline below which it doesn't decrease. Apparently regardless of the amount of rain there's something like 600-800 users who will take out a bike no matter what. Cool!&lt;/p&gt;
&lt;p&gt;So, we need to make a model that incorporates both temperature and rainfall to try to separate their effects. But to be as accurate as possible, we should include any other prominent factors. I showed in a earlier post that over the course of a day, weekdays and weekends show different ridership patters. But it turns out there's no obvious difference in the total number of trips.&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-full wp-image-241" style="font-size: 1rem;" src="http://mikejarrett.ca/blog/wp-content/uploads/weekdays_vs_weekends_boxplot-1.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;If we're going to think about weekday vs weekend, let's just include each day of the week as a separate factor. Stat holiday vs not holiday should also be included. Since there's such a dramatic difference between days with any rain and days with no rain, let's include "dry" days as a factor. The last factor I'll include is hours of daylight -- when it gets dark before 5pm, it's hard to say whether it's the temperature or the darkness that has more on an effect someone's decision to ride a Mobi.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Trips ~ Temperature + Rainfall + Dry + Holiday + Daylight + Monday + Tuesday + Wednesday + Thursday + Friday + Saturday + Sunday&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To fit the model, I'll use the OLS (ordinary least squares) class from the statsmodels Python package.
&lt;/p&gt;&lt;pre&gt;                            OLS Regression Results                          &lt;br&gt;
==============================================================================
Dep. Variable:                  Trips       R-squared:                       0.812
Model:                            OLS          Adj. R-squared:                  0.801
Method:                 Least Squares  F-statistic:                     69.65
Date:                Tue, 21 Nov 2017   Prob (F-statistic):           2.49e-58
Time:                        13:57:32           Log-Likelihood:                -1376.9
No. Observations:                 189    AIC:                             2778.
Df Residuals:                     177          BIC:                             2817.
Df Model:                          11                                       &lt;br&gt;
Covariance Type:            nonrobust                                       &lt;br&gt;
================================================================================
                                    coef    std err          t      P&amp;gt;|t|      [0.025      0.975]
&lt;hr&gt;
&lt;p&gt;Max Temp           117.3302      8.079     14.522      0.000     101.386     133.274
Total Rainmm   -29.8730      6.715     -4.449      0.000     -43.124     -16.622
Mon                     -523.1535    209.4     -2.498      0.013    -936.401    -109.906
Tue                      -523.9437    206.4     -2.537      0.012    -931.439    -116.448
Wed                    -497.6093    209.4     -2.376      0.019    -910.967     -84.252
Thu                     -429.2738    213.2     -2.013      0.046    -850.082      -8.465
Fri                       -368.8536    207.5     -1.777      0.077    -778.440      40.733
Sat                       -487.4666    206.5     -2.360      0.019    -895.072     -79.861
Sun                      -755.6349    207.6     -3.640      0.000   -1165.364    -345.906
Dry                      362.8911     75.665      4.796      0.000     213.569     512.214
Holiday               -277.1649    181.6     -1.526      0.129    -635.701      81.371
daylight_hrs       37.2471       15.672      2.377      0.019       6.319      68.175
==============================================================================
Omnibus:                        9.879   Durbin-Watson:                 1.087
Prob(Omnibus):             0.007   Jarque-Bera (JB):               20.264
Skew:                                0.116   Prob(JB):                             3.98e-05
Kurtosis:                          4.587   Cond. No.                            472.
==============================================================================&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/pre&gt;
We can take a few things away from this table. The adjusted R&lt;sup&gt;2 &lt;/sup&gt;value is 0.801 which means our model explains about 80% of the variance in the data. Pretty good! We can also say that, all other things being equal, there will be
&lt;ul&gt;
    &lt;li&gt;117 more trips for each increase of one degree Celcius&lt;/li&gt;
    &lt;li&gt;30 fewer trips for each additional of 1 mm of rain&lt;/li&gt;
    &lt;li&gt;277 fewer trips on holidays versus equivalent non-holidays&lt;/li&gt;
    &lt;li&gt;37 more trips for each additional hour of daylight&lt;/li&gt;
&lt;/ul&gt;
The coefficients associated with the days of the week can be interpreted as the intercept for each day of the week, in other words the number of trips expected on that day if all other factors are zero. This is obviously nonsense, since we can't have fewer than zero trips. But the daily high temperature for the dates I have data for are all well above zero, so the model doesn't have any data for temperatures near zero. More on this later.
&lt;p&gt;Given our model, we can plot the expected number of trips for each day on top of the measured number of trip.&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-full wp-image-248" src="http://mikejarrett.ca/blog/wp-content/uploads/trip_vs_predicted_full_model.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;The model nails the macroscopic structure, driven by temperature and daylight, and does pretty well with the day-to-day variations which are probably more driven by rainfall and the day of the week.&lt;/p&gt;
&lt;p&gt;There's a few big misses, though. Let's look at the days where our model misses the mark by over 1000 trips:&lt;/p&gt;
&lt;p&gt;On July 11th, a Tuesday, our model expects a normal summer day but the counted number of trips drops of precipitously. The weather data for that says 20 degrees and no rain, so I'm not sure what's going on. I've looked at my source data and don't see anything out of the ordinary, but I suspect there was a data acquisition issue that day.&lt;/p&gt;
&lt;p&gt;On August 12th, a Saturday, the model understates the number of riders by a large margin. There was 0.2 mm of rain measured on this day, so the model is treating it as a rainy day, but perhaps it only rained a bit overnight and was clear the rest of the day.&lt;/p&gt;
&lt;p&gt;Finally, on October 12th, a Thursday, the model again undercounts the number of trips, only expecting ~200 trips when in reality there over a thousand! There was 35 mm of rain measured that day, so even though the model expects the number of trips to keep decreasing linearly with rain, in practice if someone is going to bike in 20 mm of rain they're probably also going to bike in 30 mm of rain. Our model doesn't account for this.&lt;/p&gt;
&lt;p&gt;There's some other potentially nonlinear effects that we're not including here. During the winter in Vancouver, the coldest days are often clear and sunny. I wonder if as we get into December and January, the temperature trend might reverse and we'll see more trips on the coldest days. If that's the case, we may need a more complex model to really describe how weather affects bike share users.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;All the source code used for data acquisition and analysis in this post is available on my &lt;a href="https://github.com/mjarrett/mobi"&gt;github page&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To see more posts like this, follow me on twitter &lt;a href="https://twitter.com/MikeJarrett_"&gt;@MikeJarrett_&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>bikes</category><category>bikeshare</category><category>datavis</category><category>mobi</category><category>python</category><category>Science</category><guid>https://notes.mikejarrett.ca/what-really-affects-bikeshare-use-in-vancouver/</guid><pubDate>Wed, 22 Nov 2017 07:32:26 GMT</pubDate></item><item><title>Mobi station activity</title><link>https://notes.mikejarrett.ca/mobi-station-activity/</link><dc:creator>Mike Jarrett</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I finally got around to learning how to map data on to maps with Cartopy, so here's some quick maps of Mobi bikeshare station activity.&lt;/p&gt;
&lt;p&gt;First, an animation of station activity during a random summer day. The red-blue spectrum represents whether more bikes were taken or returned at a given station, and the brightness represents total station activity during each hour. I could take the time resolution lower than an hour, but I doubt the data is very meaningful at that level.&lt;/p&gt;
&lt;p&gt;[video width="704" height="528" mp4="http://mikejarrett.ca/blog/wp-content/uploads/movie_2017-08-18.mp4"][/video]&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;There's actually less pattern to this than I expected. I thought that in the morning you'd see more bikes being taken from the west end and south False Creek and returned downtown, and vice versa in the afternoon. But I can't really make out that pattern visually.&lt;/p&gt;
&lt;p&gt;I've also pulled out total station activity during the time I've been collecting this data, June through October 2017. I've separated it by total bikes taken and total bikes returned. A couple things to note about these images: many of these stations were not active for the whole time period, and some stations have been moved around. I've made no effort to account for this; this is simply the raw usage at each location, so the downtown&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-full wp-image-210" style="font-size: 1rem;" src="http://mikejarrett.ca/blog/wp-content/uploads/Total-Bikes-Taken-June-Oct-2017-1.png" alt="" width="640" height="480"&gt;&lt;img class="alignnone size-full wp-image-209" style="font-size: 1rem;" src="http://mikejarrett.ca/blog/wp-content/uploads/Total-Bikes-Returned-June-Oct-2017-1.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;The similarity in these maps is striking. Checking the raw data, I'm seeing incredibly similar numbers of bikes being taken and returned at each station. This either means that on aggregate people use Mobis for two way trips much more often than I expected; one way trips are cancelling each other out; or Mobi is rebalancing the stations to a degree that any unevenness is being masked out*. I hope to look more into whether I can spot artificial station balancing from my data soon, but we may have to wait for official data from Mobi to get around this.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*There's also the possibility that my data is bad, but let's ignore that for now&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Instead of just looking at activity, I tried to quantify whether there are different activity patterns at different stations. Like &lt;a href="http://mikejarrett.ca/blog/2017/10/machine-learning-with-vancouver-bike-share-data/"&gt;last week&lt;/a&gt;, I performed a primary component analysis (PCA) but with bike activity each hour in the columns, and each station as a row. I then plot the top two components which most explain the variance in the data.&lt;img class="alignnone size-full wp-image-213" src="http://mikejarrett.ca/blog/wp-content/uploads/PCA_stations.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;Like last week, much of the difference in station activity is explained by the total number of trips at each station, here represented on the X axis. There is a single main group of stations with a negative slope, but some outliers that are worth looking at. There are a few stations with higher Y values than expected.&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-full wp-image-214" src="http://mikejarrett.ca/blog/wp-content/uploads/PCA_stations_labeled1.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;These 5 stations are all Stanley Park stations. There's another four stations that might be slight outliers.&lt;/p&gt;
&lt;p&gt;&lt;img class="alignnone size-full wp-image-215" src="http://mikejarrett.ca/blog/wp-content/uploads/PCA_stations_labeled2.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;These are Anderson &amp;amp; 2nd (Granville Island); Aquatic Centre; Coal Harbour Community Centre; and  Davie &amp;amp; Beach. All seawall stations at major destinations. So all the outlier stations are stations that we wouldn't expect to show regular commuter patterns, but more tourist-style activity.&lt;/p&gt;
&lt;p&gt;I was hoping to see different clusters to represent residential area stations vs employment area stations, but these don't show up. Not terribly surprising since the Mobi stations cover an area of the city where there is fairly dense residential development almost everywhere. This fits with our maps of station activity, where we saw that there were no major difference between bikes taken and bikes returned at each station.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;All the source code used for data acquisition and analysis in this post is available on my &lt;a href="https://github.com/mjarrett/mobi"&gt;github page&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To see more posts like this, follow me on twitter &lt;a href="https://twitter.com/mikejarrett_"&gt;@mikejarrett_&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>bikes</category><category>datavis</category><category>mobi</category><category>python</category><category>Science</category><category>vancouver</category><guid>https://notes.mikejarrett.ca/mobi-station-activity/</guid><pubDate>Sun, 05 Nov 2017 05:36:22 GMT</pubDate></item><item><title>Machine learning with Vancouver bike share data</title><link>https://notes.mikejarrett.ca/machine-learning-with-vancouver-bike-share-data/</link><dc:creator>Mike Jarrett</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Six months ago I came across Jake VanderPlas' blog post &lt;a href="https://jakevdp.github.io/blog/2015/07/23/learning-seattles-work-habits-from-bicycle-counts/"&gt;examining Seattle bike commuting habits through bike trip data&lt;/a&gt;. I wanted to try to recreate it for Vancouver, but the city doesn't publish detailed bike trip data, just monthly numbers. For plan B, I looked into Mobi bike share data. But still no published data! Luckily, Mobi does publish an API with the number of bike at each station. It doesn't give trip information, but it's a start.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;em&gt;All the code needed to recreate this post is available on &lt;a href="https://github.com/mjarrett/mobi"&gt;my github page&lt;/a&gt;.&lt;/em&gt;
&lt;/p&gt;&lt;h3&gt;Data Acquisition&lt;/h3&gt;
The first problem was to read the API and take a guess at station activity. To do this, I query the API every minute. Whenever the bike count at a station changes, this is counted as bikes being taken out or returned. I don't know exactly how often Mobi updates this API, but I'm certainly undercounting activity -- whenever two people return a bike and take a bike within a minute or so of each other I'll miss the activity. But it's good enough for my purposes, and I'm more interested in trends than total numbers anyway.
&lt;p&gt;I had two main problems querying the API: First, I'd starting by running the query script on my home machine. This meant that any computer downtime meant missing data. There's a few days missing while I updated my computer. Eventually I migrated to a google cloud server, so downtime is no longer an issue, but this introduced the second problem: time zones. I hadn't set a time zone for my new server, so all the times were recorded as UTC, while earlier data had been recorded in local Vancouver time. It took a long time of staring at the data wondering why it didn't make sense for me to realize what had happened, but luckily an easy fix in Pandas.
&lt;/p&gt;&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;img class="aligncenter wp-image-168 size-full" src="http://mikejarrett.ca/blog/wp-content/uploads/hourly_usage_may-sep.png" alt="" width="640" height="480"&gt;
&lt;p&gt;Our long stretch of good weather this summer is visible in the data. Usage was pretty consistent over July and August, and began to fall off near the end of September when the weather turned. I'll be looking more into the relationship between weather and bike usage once I have more off-season data, but for now I'm more interested in zooming in and looking at daily usage patterns. Looking at a typical week in mid summer, we see weekdays showing a typical commuter pattern with morning and evening peaks and a midday lull. One thing that jumps out is the afternoon peak being consistently larger than the morning peak. With bike share, people have the option to take the bus to work in the morning and then pick up a bike afterwork if they're in the mood. Weekends lose that bimodal distribution and show a single normal distribution centered in the afternoon. On most weekend days and some weekdays, there is a shoulder or very minor peak visible in the late evening, presumably people heading home from a night out.&lt;/p&gt;
&lt;p&gt;&lt;img class="aligncenter wp-image-166 size-full" src="http://mikejarrett.ca/blog/wp-content/uploads/weekdata-2017-07-31-2017-08-06.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;Looking at the next week, Monday immediately jumps out as showing a weekend pattern instead of a weekday. That Monday, of course, is the Monday of the August long weekend.&lt;/p&gt;
&lt;p&gt;&lt;img class="aligncenter wp-image-167 size-full" src="http://mikejarrett.ca/blog/wp-content/uploads/weekdata-2017-08-07-2017-08-13.png" alt="" width="640" height="480"&gt;&lt;/p&gt;
&lt;p&gt;So, by eye we can fairly easily distinguish weekday and weekend travel patterns. How can we train a computer to do the same?&lt;/p&gt;
&lt;p&gt;First, I pivoted my data such that each row is a day, and each column is the hourly bike activity at each station (# columns = # stations * 24). I decided to keep the station information instead of summing across stations, but both give about the same result. This was provided as input to the &lt;a href="http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html"&gt;primary component analysis (PCA) class of the Scikit-Learn Python package&lt;/a&gt;. PCA attempts to reduce the dimensionality of a data set (in our case, columns) while preserving the variance. For visualization, we can plot our data based on the the two components which most explain the variance in the data. Each point is a single day, colour labelled by total number of trips that day.&lt;/p&gt;
&lt;p&gt;&lt;img class="wp-image-192 size-full" style="font-size: 1rem;" src="http://mikejarrett.ca/blog/wp-content/uploads/PCA_numtrips-2.png" alt="" width="640" height="480"&gt; PCA coloured by number of daily trips&lt;/p&gt;
&lt;p&gt;It's apparent that the first component (along the X axis) corresponds roughly (but not exactly) to total number of trips. But what does the Y axis represent? To investigate further, we label the data points by day of week.&lt;/p&gt;
&lt;p&gt;&lt;img class="wp-image-191 size-full" style="font-size: 1rem;" src="http://mikejarrett.ca/blog/wp-content/uploads/PCA_dayofweek-2.png" alt="" width="640" height="480"&gt; PCA coloured by day of week&lt;/p&gt;
&lt;p&gt;The pattern is immediately clear. Weekdays are clustered at the bottom of our plot, and weekends are clustered at the top. A few outliers jump out. There are 3 Mondays clustered in with the weekend group. These turn out to be the Canada Day, BC Day and Labour Day stat holidays.&lt;/p&gt;
&lt;p&gt;&lt;img class="wp-image-190 size-full" style="font-size: 1rem;" src="http://mikejarrett.ca/blog/wp-content/uploads/PCA_dayofweek_mondays-2.png" alt="" width="640" height="480"&gt; PCA with noteable Mondays labelled&lt;/p&gt;
&lt;p&gt;Finally, I wanted to try unsupervised clustering to see if weekday and weekend clusters are separated enough to be distinguished automatically. For this, I used the &lt;a href="http://scikit-learn.org/stable/modules/mixture.html"&gt;GaussianMixture class from Scikit-learn&lt;/a&gt;. Here, we try to automatically split our data into a given number of groups, in this case two.&lt;/p&gt;
&lt;p&gt;&lt;img class="wp-image-193 size-full" src="http://mikejarrett.ca/blog/wp-content/uploads/PCA_clustering-2.png" alt="" width="640" height="480"&gt; PCA and unsupervised clustering of June-September bike share usage&lt;/p&gt;
&lt;p&gt;Not quite. There is a group of low-volume weekend days in the top right cornerthat can't be automatically distinguished from weekdays. All these days are in June and September. Maybe with more non-summer data this will resolve itself.&lt;/p&gt;
&lt;p&gt;Out of curiosity, I re-ran the PCA and unsupervised clustering with only peak season data (July and August). Here, with more a more homogenous dataset, clustering works much better. In fact, only the first component (plotted along the X axis) is needed to distinguish between usage patterns.&lt;/p&gt;
&lt;p&gt;&lt;img class="wp-image-194 size-full" src="http://mikejarrett.ca/blog/wp-content/uploads/PCA_clustering-3.png" alt="" width="640" height="480"&gt; PCA and unsupervised clustering of July and August bike share usage&lt;/p&gt;
&lt;p&gt;Bike share usage will obviously decline during Vancouver's wet season, but I'm very interested to see how usage patterns will differ during the lower volume months.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;All the source code used for data acquisition and analysis in this post is available on my &lt;a href="https://github.com/mjarrett/mobi"&gt;github page&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To see more posts like this, follow me on twitter &lt;a href="https://twitter.com/MikeJarrett_"&gt;@MikeJarrett_&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;</description><category>bikes</category><category>datavis</category><category>mobi</category><category>python</category><category>Science</category><guid>https://notes.mikejarrett.ca/machine-learning-with-vancouver-bike-share-data/</guid><pubDate>Mon, 23 Oct 2017 12:00:19 GMT</pubDate></item><item><title>Datetime axis formatting with Pandas and matplotlib</title><link>https://notes.mikejarrett.ca/140/</link><dc:creator>Mike Jarrett</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Panda's Dataframe.plot() function is handy, but sometimes I run up against edge cases and spend too much time trying to fix them.&lt;/p&gt;
&lt;p&gt;On one case recently, I wanted to overlay a line plot on top of a bar plot. Easy, right? Not when your dataframe has a datetime axis. The bar plot and and line plot functions format the x-axis date labels differently, and cause chaos when you try to use them on the same axes. None of the usual tick label formatting methods got me back anything useable.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;The solution was to take a step back and use the basic matplotlib functions to plot instead of the pandas wrappers. Calling ax.plot() and ax.bar() give sensible outputs where df.plot() didn't.&lt;/p&gt;
&lt;p&gt;See the below notebook for an example of the problem and solution.&lt;/p&gt;
&lt;script src="https://gist.github.com/mjarrett/72ac77d80e50f32f020ca1abee5bdc49.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>Science</category><guid>https://notes.mikejarrett.ca/140/</guid><pubDate>Sat, 27 May 2017 05:08:36 GMT</pubDate></item></channel></rss>